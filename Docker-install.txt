                                   

                                                         Docker Installation
                                                        ----------------------------

https://docs.docker.com/engine/install/ubuntu/


   Method-1:  using a Script :
  ========================
               $ curl -fsSL https://get.docker.com -o get-docker.sh
               $ sudo sh get-docker.sh 
               $ docker -version

                                                    [OR]

  Method-2:  using a Commands:
 ==========================

Step-1:  to Setup a Repository:
--------------------------------------------

$ sudo apt-get update

$ sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release


$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg 

--dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

$ echo \
  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-

keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > 

/dev/null

Step-2:  to Install Docker Engine :
----------------------------------------------
 $ sudo apt-get update
 $ sudo apt-get install docker-ce docker-ce-cli containerd.io

$ apt-cache madison docker-ce

   Select a required version of Docker Engine :  5:20.10.17~3-0~ubuntu-

bionic

Syntax:
   $ sudo apt-get install docker-ce=<VERSION_STRING> docker-ce-

cli=<VERSION_STRING> containerd.io

Ex: 
   $ sudo apt-get install docker-ce=5:20.10.17~3-0~ubuntu-bionic 

docker-ce-cli=5:20.10.17~3-0~ubuntu-bionic containerd.io


 $ docker --version
Docker version 19.03.13, build 4484c46d9d

$ sudo docker run hello-world

Hello from Docker!


                                            Docker Commands
                                          -------------------------------
   36  docker --version
   26  docker images
   27  docker pull ubuntu
   28  docker pull tomcat
   30  docker images
   31  docker inspect <Image id>

   39  docker run ubuntu    ---> to create a container
   40  docker ps
   43  docker ps -a
   46  docker run -it centos
  # exit
   45  docker run -it ubuntu  ---> to run a container in interactive mode

  # cat /etc/os-release
  # apt-get update
  # apt-get install vim wget tree git-core net-tools -y
  [ctrl + pq ]

   51  docker run -itd --name mycontainer ubuntu   --> detached mode
   54  docker commit <container id> myimage  --> to create a new image


visit ---> https://hub.docker.com/  --> create a new account

    # docker login
username:  xxxx
password:   xxxxx

   # docker tag myimage sathyadevops/myimage
   # docker push sathyadevops/myimage
   # docker pull sathyadevops/myimage

   # docker inspect <container id>  ---> to enter to a running container
   # date
                     [OR]
   # docker exec <container id> "date" 

   # docker top <container id>           --> to list process of container
   # docker pause <container id>      --> to pause process of container
   # docker unpause <container id>  --> to resume process of container
   # docker stop <container id>         --> to stop container
   # docker start <container id>         --> to start container
   # docker restart <container id>      --> to restart container
   # docker rm <container id>            --> to remove container
   # docker rm <container id>  --force

   # docker ps              --> to list running containers
   # docker ps -q          --> to list running container ids
   # docker ps -a          --> to list all container
   # docker ps -aq         --> to list container ids
   # docker stop $(docker ps -q)  --> to stop all running containers
   # docker rm $(docker ps -aq)   --> to remove all containers

   # docker images
   # docker images -q                        ---> to list image ids
   # docker rmi <image id>                --> to remove an image
   # docker rmi <image id> --force
   # docker rmi $(docker images -q)   ---> to remove all images



                                             Docker Port Mapping
                                            --------------------------------
 
  126  docker run -itd -p 80:80 --name webserver nginx
  127  docker ps
  128  netstat -lntp
  130  docker run -itd -p 8080:8080 --name appserver1 tomcat:8.0
  140  docker run -itd -p 9090:8080 --name appserver2 tomcat:8.0
  127  docker ps
  128  netstat -lntp

to deploy index.html file for tomcat container:
------------------------------------------------------------------
   # find / -name webapps


Default Tomcat path:           /var/lib/tomcat/webapps
Tomcat path in Container:  /var/lib/docker/overlay2/<layer                          

           id>/merged/usr/local/tomcat/webapps

index.html file:
----------------------  
  # cd  ..../usr/local/tomcat/tomcat/webapps/ROOT
  # vi index.html
 Hello from Tomcat container!

  Browser --> http://<Host IP-Addr>:8080

sample.war file:
------------------------
  # cd  ..../usr/local/tomcat/tomcat/webapps

  # wget https://tomcat.apache.org/tomcat-7.0-

doc/appdev/sample/sample.war
  Browser --> http://<Host IP-Addr>:8080/sample


                                                Docker Volumes
                                              ---------------------------  

  182  mkdir myvol
  183  cd myvol/
  184  touch demo.txt sample.war index.html
  185  ls
  186  clear
  187  vi demo.txt
  188  cat demo.txt
  189  clear
  190  cd
  191  clear
  192  docker run -it -v /root/myvol:/myvol ubuntu
  193  ls
  194  cd myvol/
  195  cler
  196  clear
  197  ls
  198  cat sample.txt
  199  cd ..
  200  docker run -it -v /root/myvol:/myvol ubuntu
  201  cd myvol/


#vi  Dockerfile
      FROM ubuntu
     MAINTAINER satish
     RUN apt-get update
     RUN echo “sathya tech”
     CMD ["echo","Hello world"]
# docker build –t hello:latest .
# docker run  hello


root@ip-172-31-33-51:~# cat Dockerfile
     FROM ubuntu
     MAINTAINER satish
     RUN apt-get update
     RUN apt-get install -y nginx
     COPY index.html /usr/share/nginx/html/index.html
     USER root
     WORKDIR /usr/share/nginx/html
     ENV JAVA_PATH='/usr/bin/java'
     VOLUME /myvol
     EXPOSE 80
     CMD ["service","nginx","start"]
root@ip-172-31-33-51:~#
root@ip-172-31-33-51:~# # docker build -t webserver:1.0 .
root@ip-172-31-33-51:~#
root@ip-172-31-33-51:~# # docker run -it -p 80:80 -v myvol:/myvol 

webserver:1.0 /bin/bash
root@ip-172-31-33-51:~#
root@ip-172-31-33-51:~#


  root@ip-172-31-33-51:~# cat Dockerfile
   FROM tomcat:8.0
   MAINTAINER satish
   RUN apt-get update && apt-get install -y curl
   RUN apt-get install -y git-core
   COPY index.html /usr/local/tomcat/webapps/ROOT/index.html
   ADD https://tomcat.apache.org/tomcat-7.0-

doc/appdev/sample/sample.war /usr/local/tomcat/webapps/sample.war
   USER root
   WORKDIR /usr/local/tomcat/webapps
   EXPOSE 8080
   CMD ["catalina.sh","run"]
root@ip-172-31-33-51:~#
root@ip-172-31-33-51:~# # docker build -t appserver:1.0 .
root@ip-172-31-33-51:~#
root@ip-172-31-33-51:~# # docker run -itd -p 8080:8080 appserver:1.0


		           Docker-Compose Install
		           -----------------------------------
https://docs.docker.com/compose/install/

Method-1:
---------------
   #  sudo curl -L 

"https://github.com/docker/compose/releases/download/1.29.2/docker-

compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
   # sudo chmod +x /usr/local/bin/docker-compose
   # sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
   # docker-compose -v


https://docs.docker.com/compose/install/compose-plugin/#installing-

compose-on-linux-systems

Method-2:
---------------
# sudo apt-get update
# sudo apt-get install docker-compose-plugin
# apt-cache madison docker-compose-plugin
# sudo apt-get install docker-compose-plugin=<VERSION_STRING>

 2.6.0~ubuntu-bionic

# sudo apt-get install docker-compose-plugin=2.6.0~ubuntu-bionic
# docker compose version















Ex-1:
-------
   # mkdir nginx
   # vi docker-compose.yml

version: '3'
services:
  web:
    image: nginx
    ports:
       - "80:80"
  db:
    image: mysql
    ports:
       - "3306:3306"
    environment:
       - MYSQL_ROOT_PASSWORD=abc123
       - MYSQL_USER=sathya
       - MYSQL_PASSWORD=abc123
       - MYSQL_DATABASE=demodb


Ex-2:
   # mkdir wordpress
   # vi docker-compose.yml

version: "3"
services:
  wordpress:
    container_name: my_wordpress
    image: wordpress
    ports:
      - "8080:80"
    links:
      - mysql
    environment:
      WORDPRESS_DB_HOST: mysql
      WORDPRESS_DB_USER: root
      WORDPRESS_DB_PASSWORD: "12345"
      WORDPRESS_DB_NAME: wordpress
  mysql:
    container_name: my_mysql
    image: "mysql:5.7"
    volumes:
      - ./.mysql:/var/lib/mysql
    environment:
      MYSQL_DATABASE: wordpress
      MYSQL_ROOT_PASSWORD: "12345" 

# docker compose up -d
# docker ps
# netstat -lntp




  
